/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-secrets",
factory: function (require) {
var plugin=(()=>{var m=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var E=Object.getOwnPropertyNames;var R=Object.prototype.hasOwnProperty;var f=(e=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(e,{get:(r,o)=>(typeof require<"u"?require:r)[o]}):e)(function(e){if(typeof require<"u")return require.apply(this,arguments);throw new Error('Dynamic require of "'+e+'" is not supported')});var y=(e,r)=>{for(var o in r)m(e,o,{get:r[o],enumerable:!0})},x=(e,r,o,s)=>{if(r&&typeof r=="object"||typeof r=="function")for(let t of E(r))!R.call(e,t)&&t!==o&&m(e,t,{get:()=>r[t],enumerable:!(s=v(r,t))||s.enumerable});return e};var w=e=>x(m({},"__esModule",{value:!0}),e);var h={};y(h,{default:()=>S});var c=f("@yarnpkg/core");var P=f("@yarnpkg/core");var d=f("child_process");function l(e,r=!0){return new Promise((o,s)=>{(0,d.exec)(e,(t,n,i)=>{t?(r&&console.error(`Error: ${t.message}, out: ${i??n}`),s(t)):(r&&console.info(n),o(n))})})}var a=class{constructor(){this.prefix=process.env.SECRET_PROJECT_PREFIX??"frontend-"}async get({project:r,report:o}){let s=r.getWorkspaceByCwd(process.cwd()),t=s==null?void 0:s.manifest.name.name,n=r.topLevelWorkspace.manifest.name.name===t;o.reportInfoOnce(P.MessageName.UNNAMED,`Getting secrets from doppler for ${t}`);let i=await l(`doppler secrets download --no-file --format=json -p ${this.getProjectName(t,n)}`,!1);return o.reportJson(i),JSON.parse(i)}getProjectName(r,o){return o?r:`${this.prefix}${r}`}};var g={doppler:a};var N={hooks:{setupScriptEnvironment:async(e,r)=>{let o=process.env.SECRETS_PROVIDER||"doppler",s=g[o];(await c.StreamReport.start({configuration:e.configuration,stdout:process.stdout,includeLogs:!0},async n=>{try{let i=await new s().get({project:e,report:n});for(let[p,u]of Object.entries(i))r[p]&&n.reportWarningOnce(c.MessageName.UNNAMED,`Overriding environment variable ${p} with value from doppler`),r[p]=u}catch{}})).exitCode()}}},S=N;return w(h);})();
return plugin;
}
};
