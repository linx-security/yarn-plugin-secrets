/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-secrets",
factory: function (require) {
var plugin=(()=>{var E=Object.defineProperty;var M=Object.getOwnPropertyDescriptor;var O=Object.getOwnPropertyNames;var A=Object.prototype.hasOwnProperty;var a=(r=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(r,{get:(e,o)=>(typeof require<"u"?require:e)[o]}):r)(function(r){if(typeof require<"u")return require.apply(this,arguments);throw new Error('Dynamic require of "'+r+'" is not supported')});var j=(r,e)=>{for(var o in e)E(r,o,{get:e[o],enumerable:!0})},$=(r,e,o,n)=>{if(e&&typeof e=="object"||typeof e=="function")for(let t of O(e))!A.call(r,t)&&t!==o&&E(r,t,{get:()=>e[t],enumerable:!(n=M(e,t))||n.enumerable});return r};var D=r=>$(E({},"__esModule",{value:!0}),r);var F={};j(F,{default:()=>b});var d=a("@yarnpkg/core");var c=a("@yarnpkg/core");var x=a("child_process"),m=(r,e,o=!0)=>new Promise((n,t)=>{(0,x.exec)(`${r} ${e.join(" ")}`,(s,i,p)=>{s?(o&&console.error(`Error: ${s.message}, out: ${p??i}`),t(s)):(o&&console.info(i),n(i))})});var f=class extends Error{constructor(){super("InvalidJsonError")}},l=r=>{try{return JSON.parse(r)}catch{throw new f}};var w=a("@yarnpkg/core"),P=(r,e,o)=>{for(let[n,t]of Object.entries(e)){let s=r[n];s&&s!==t&&o&&o.reportWarningOnce(w.MessageName.UNNAMED,`Overriding environment variable ${n} with value from secrets provider`),r[n]=t}};var g="infisical",N=class extends Error{constructor(){super(`${g} cli not installed`)}},v=async r=>{try{await m(`${g} --version`,[],!1)}catch{throw new N}};var y=a("@yarnpkg/core"),u=a("fs/promises");var U=[".infisical.json"],I=async({cwd:r},e)=>{let o=(await(0,u.readdir)(r)).filter(i=>U.some(p=>i.includes(p)));if(!(o!=null&&o.length))return e.reportWarningOnce(y.MessageName.UNNAMED,"No infisical configuration file found."),null;o.length>1&&e.reportWarningOnce(y.MessageName.UNNAMED,"Multiple infisical configuration files found",{reportExtra:()=>n});let n=o[0],t=await(0,u.readFile)(`${r}/${n}`,"utf8");return l(t)};var R=a("@yarnpkg/core"),h=({secrets:r,report:e})=>Array.isArray(r)?r.reduce((n,{key:t,value:s})=>(n[t]=s,n),{}):(e.reportWarningOnce(R.MessageName.UNNAMED,"Invalid json returned from infisical"),null);var W="infisical",C=async({project:r,report:e})=>{let o=c.Report.progressViaCounter(5),n=e.reportProgress(o);try{o.set(1),await v(e),o.set(2);let t=r.getWorkspaceByCwd(process.cwd()),s=await I(t,e);s&&e.reportInfoOnce(c.MessageName.UNNAMED,`Project id: ${s.workspaceId}`),o.set(3);let i=await m(`${g} export `,["--format=json"],!1);e.reportInfoOnce(c.MessageName.UNNAMED,"Fetched successfully",{reportExtra:()=>i}),o.set(4);let p=l(i);return o.set(5),h({secrets:p,report:e})}catch(t){return t instanceof f?(e.reportWarningOnce(c.MessageName.UNNAMED,"Invalid json returned from infisical"),null):(e.reportWarningOnce(c.MessageName.UNNAMED,t.message),null)}finally{n.stop()}},k={get:C,key:W};var S={hooks:{setupScriptEnvironment:async(r,e)=>{(await d.StreamReport.start({configuration:r.configuration,stdout:process.stdout,includeLogs:!0},async n=>{await n.startTimerPromise("Fetching secrets from doppler",async()=>{try{let t=await k.get({project:r,report:n});t&&P(e,t,n)}catch(t){if(!(t instanceof Error))return;n.reportWarningOnce(d.MessageName.UNNAMED,t.message)}})})).exitCode()}}},b=S;return D(F);})();
return plugin;
}
};
